blueprint:
  name: Double Switch Sync (with context filtering)
  description: "Sync two switches so they control each other without retriggering loops."
  domain: automation
  input:
    switch_1:
      name: Switch 1
      description: "First switch entity (e.g., tasmota_17_1)"
      selector:
        entity:
          domain: switch
    switch_2:
      name: Switch 2
      description: "Second switch entity (e.g., tasmota_17_2)"
      selector:
        entity:
          domain: switch

mode: restart

trigger:
  - platform: state
    entity_id: !input "switch_1"
  - platform: state
    entity_id: !input "switch_2"

condition: []

action:
  - choose:
      # When switch_1 turns on, turn switch_2 on (only if the change was not caused by this automation)
      - conditions:
          - condition: state
            entity_id: !input "switch_1"
            state: "on"
          - condition: state
            entity_id: !input "switch_2"
            state: "off"
          - condition: template
            value_template: >
              {{ trigger.to_state.context.parent_id is none }}

        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input "switch_2"

      # When switch_1 turns off, turn switch_2 off (only if the change was not caused by this automation)
      - conditions:
          - condition: state
            entity_id: !input "switch_1"
            state: "off"
          - condition: state
            entity_id: !input "switch_2"
            state: "on"
          - condition: template
            value_template: >
              {{ trigger.to_state.context.parent_id is none }}

        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input "switch_2"

      # When switch_2 turns on, turn switch_1 on (only if the change was not caused by this automation)
      - conditions:
          - condition: state
            entity_id: !input "switch_2"
            state: "on"
          - condition: state
            entity_id: !input "switch_1"
            state: "off"
          - condition: template
            value_template: >
              {{ trigger.to_state.context.parent_id is none }}

        sequence:
          - service: switch.turn_on
            target:
              entity_id: !input "switch_1"

      # When switch_2 turns off, turn switch_1 off (only if the change was not caused by this automation)
      - conditions:
          - condition: state
            entity_id: !input "switch_2"
            state: "off"
          - condition: state
            entity_id: !input "switch_1"
            state: "on"
          - condition: template
            value_template: >
              {{ trigger.to_state.context.parent_id is none }}

        sequence:
          - service: switch.turn_off
            target:
              entity_id: !input "switch_1"
